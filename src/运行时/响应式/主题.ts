import type { 无, 未知 } from "../全局常量";

export interface 观察者<类型> {
    下一个(值: 类型): 无;
    出错(错误: 未知): 无;
    完成(): 无;
}

export interface 订阅 {
    取消订阅(): 无;
}

export class 主题<类型> {
    #观察者列表: 观察者<类型>[] = [];

    /**
     * 添加观察者
     * @param 观察者
     * @returns 订阅
     */
    订阅(观察者: 观察者<类型> | ((值: 类型) => void)): 订阅 {
        let 对象观察者: 观察者<类型> =
            typeof 观察者 === "function"
                ? { 下一个: (值: 类型) => 观察者(值), 出错: () => {}, 完成: () => {}, }
                : 观察者;

        this.#观察者列表.push(对象观察者);

        return {
            取消订阅: () => {
                const 索引 = this.#观察者列表.indexOf(对象观察者);
                if (索引 !== -1) {
                    this.#观察者列表.splice(索引, 1);
                }
            },
        };
    }

    /**
     * 发送数据给所有观察者
     * @param 值
     */
    下一个(值: 类型): 无 {
        for (const 观察者 of this.#观察者列表) {
            观察者.下一个(值);
        }
    }

    /**
     * 发送错误给所有观察者
     * @param 错误
     */
    出错(错误: 未知): 无 {
        for (const 观察者 of this.#观察者列表) {
            观察者.出错(错误);
        }
    }

    /**
     * 发送完成信号给所有观察者
     */
    完成(): 无 {
        for (const 观察者 of this.#观察者列表) {
            观察者.完成();
        }
    }
}
