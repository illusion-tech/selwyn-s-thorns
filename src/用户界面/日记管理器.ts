import { 成册配置, 日记册类 } from "../应用/日记/日记册.ts";
import { 日记本类 } from "../应用/日记/日记本.ts";
import { 日记页类, type 日记页配置 } from "../应用/日记/日记页.ts";
import { 时间管理器类 } from "../应用/时间管理器.ts";

import type { 坐标, 大小, 字符串, 数值, 无, 是否, 未知, 资源标识 } from "../运行时/全局常量.ts";
import { 否, 已选择, 是, 最大填充, 未定义, 水平对齐方式 } from "../运行时/全局常量.ts";
import { 测量字符串 } from "../运行时/工具.ts";
import { 常量, 接口 } from "../运行时/易次元.ts";
import { 事件目标, 自定义事件 } from "../运行时/网络/事件目标.ts";

import { 辅助阅读器类 } from "./辅助阅读器.ts";
import type { 记录类, 选项记录器类 } from "./选项记录器.ts";

export interface 写日记配置参数 {
    编号: 数值;
    日期: 字符串;
    段落: (字符串 | (() => 字符串))[];
}

export class 日记管理器类 extends 事件目标 {
    #时间管理器: 时间管理器类;
    #选项记录器: 选项记录器类;

    #回溯模式选择(所属图层: 字符串): Promise<"读档" | "重写"> {
        return new Promise((履行, 拒绝) => {
            接口.创建图层("回溯模式选择_图层", {
                所属图层,
                位置: { 横: 640, 纵: 360 },
                锚点: { 横: 50, 纵: 50 },
                裁剪模式: 是,
                裁剪区域: { 宽: 1280, 高: 720 },
                事件阻挡: 是,
            });

            const 确认选择 = async (模式: "读档" | "重写") => {
                console.log("确认选择: ", 模式);

                await Promise.all([
                    接口.移除对象("回溯模式选择_提示文字", { 时长: 100 }),
                    接口.移除对象("回溯模式选择_读档", { 时长: 100 }),
                    接口.移除对象("回溯模式选择_重写", { 时长: 100 }),
                ]);

                await 接口.创建图片("回溯模式选择_确认选择", {
                    所属图层: "回溯模式选择_图层",
                    资源标识: 模式 === "读档" ? "$60215194" : "$60215193", // resId: "$60215194" | resId: "$60215193"
                    位置: { 横: 390, 纵: 300 },
                });

                await 接口.创建选项("回溯模式选择_确认选择_是的按钮", {
                    所属图层: "回溯模式选择_图层",
                    资源标识: "$60215186", // resId: "$60215186"
                    位置: { 横: 461, 纵: 236 },
                    当点触结束时: async () => {
                        await 接口.移除对象("回溯模式选择_图层", { 时长: 100 });
                        履行(模式);
                    },
                });

                await 接口.创建选项("回溯模式选择_确认选择_不是按钮", {
                    所属图层: "回溯模式选择_图层",
                    资源标识: "$60215184", // resId: "$60215184"
                    位置: { 横: 732, 纵: 236 },
                    当点触结束时: async () => {
                        await 接口.移除对象("回溯模式选择_图层", { 时长: 100 });
                        拒绝();
                    },
                });
            };

            接口.创建图片("回溯模式选择_背景底板", {
                所属图层: "回溯模式选择_图层",
                资源标识: "$60215189", //  resId: "$60215189"
                位置: { 横: 325, 纵: 187 },
            });

            接口.创建图片("回溯模式选择_提示文字", {
                所属图层: "回溯模式选择_图层",
                资源标识: "$60215192", // resId: "$60215192"
                位置: { 横: 440, 纵: 400 },
            });

            接口.创建选项("回溯模式选择_重写", {
                所属图层: "回溯模式选择_图层",
                资源标识: "$60215191", // resId: "$60215191"
                位置: { 横: 450, 纵: 335 },
                当点触结束时: () => 确认选择("重写"),
            });

            接口.创建选项("回溯模式选择_读档", {
                所属图层: "回溯模式选择_图层",
                资源标识: "$60215188", // resId: "$60215188"
                位置: { 横: 450, 纵: 266 },
                当点触结束时: () => 确认选择("读档"),
            });
        });
    }

    async #查看日记页(入口页: 日记页类) {
        const 日记页图层 = "日记本_日记页_图层";
        await 接口.创建图层(日记页图层, {
            层级索引: 170,
            位置: { 横: 640, 纵: 360 },
            锚点: { 横: 50, 纵: 50 },
            裁剪模式: 是,
            裁剪区域: { 宽: 1280, 高: 720 },
            事件阻挡: 是,
            是否可见: 否,
        });

        await 接口.创建图片("日记本_日记页_背景", {
            所属图层: 日记页图层,
            资源标识: 入口页.资源标识,
            位置: { 横: 640, 纵: 360 },
            锚点: { 横: 50, 纵: 50 },
        });

        let 索引 = 0;
        for (const 图片 of 入口页.额外图片) {
            await 接口.创建图片(`日记本_日记页_图片_${索引++}`, {
                所属图层: 日记页图层,
                资源标识: 图片.资源标识,
                位置: 图片.位置,
            });
        }

        await 接口.创建选项("日记本_日记页_返回按钮", {
            所属图层: 日记页图层,
            资源标识: "$61969333", // resId: "$61969333"
            位置: { 横: 1110, 纵: 595 },
            当点触结束时: () => {
                接口.移除对象(日记页图层);
            },
        });

        await 接口.创建选项("日记本_日记页_辅助阅读按钮", {
            所属图层: 日记页图层,
            资源标识: "$52524475", // resId: "$52524475"
            位置: { 横: 48, 纵: 596 },
            当点触结束时: () => {
                /**
                 * ```
                 * ┌───────────┬────────────────────┐
                 * │           │                    │
                 * │           │        阅读        │
                 * │           │        区域        │
                 * │           │                    │
                 * └───────────┴────────────────────┘
                 * ```
                 */
                const 辅助阅读 = new 辅助阅读器类({
                    文本内容: 入口页.辅助阅读内容,
                    背景图资源标识: "$53062945",
                    背景图水平翻转: 是,
                    容器宽度: 0.5625,
                    容器高度: 最大填充,
                    容器水平对齐方式: 水平对齐方式.靠右,
                    容器内边距: { 上: 38, 下: 38, 左: 46, 右: 46 },
                    文本字体: { 名称: "方正楷体", 字号: 30, 颜色: "#ffffff" },
                });

                辅助阅读.查看();
            },
        });

        const 回溯至 = 入口页.回溯至;
        if (回溯至) {
            await 接口.创建选项("日记本_日记页_时间回溯按钮", {
                所属图层: 日记页图层,
                资源标识: "$61969336",
                位置: { 横: 37, 纵: 475 },
                当点触结束时: async () => {
                    const 回溯模式 = await this.#回溯模式选择(日记页图层);
                    const 剧情标识 = 回溯模式 === "读档" ? 回溯至.读档剧情标识 : 回溯至.重写剧情标识;
                    this.重置日记选项记录({
                        起始日期: 入口页.日期,
                        是否含当日: 回溯模式 === "读档" ? 否 : 是,
                    });
                    await 接口.跳转剧情(剧情标识, { 切换效果: 常量.切换效果.白色闪光切换, 时长: 5000 });
                    await 接口.关闭当前用户界面();
                },
            });
        }

        if (入口页.上一页) {
            const 上一页 = 入口页.上一页;
            await 接口.创建选项("日记本_日记页_向左翻页按钮", {
                所属图层: 日记页图层,
                资源标识: "$61969338",
                位置: { 横: 9, 纵: 34 },
                当点触结束时: () => {
                    this.#查看日记页(上一页);
                },
            });
        }

        if (入口页.下一页) {
            const 下一页 = 入口页.下一页;
            await 接口.创建选项("日记本_日记页_向右翻页按钮", {
                所属图层: 日记页图层,
                资源标识: "$61969337",
                位置: { 横: 1151, 纵: 45 },
                当点触结束时: () => {
                    this.#查看日记页(下一页);
                },
            });
        }

        await 接口.显示对象(日记页图层);
        await 接口.播放音频("日记本出现音效", { 资源标识: "$53383017" });
    }

    async #查看日记册(入口册: 日记册类, 保持显示: 是否 = 否) {
        await 接口.播放音频("日记本出现音效", { 资源标识: 保持显示 === 否 ? "$50698523" : "$53383017" });
        await 接口.移除对象("项链菜单_日记本_图层");
        await 接口.创建图层("项链菜单_日记本_图层", {
            层级索引: 160,
            位置: { 横: 640, 纵: 360 },
            锚点: { 横: 50, 纵: 50 },
            裁剪模式: 是,
            裁剪区域: { 宽: 1280, 高: 720 },
            是否可见: 保持显示,
            事件阻挡: 是,
        });

        await 接口.创建图片("项链菜单_日记本_日记册_图片", {
            所属图层: "项链菜单_日记本_图层",
            资源标识: 入口册.资源标识,
            位置: { 横: 640, 纵: 360 },
            锚点: { 横: 50, 纵: 50 },
        });

        await 接口.创建选项("项链菜单_日记本_返回_选项", {
            所属图层: "项链菜单_日记本_图层",
            资源标识: "$61969333",
            位置: { 横: 1110, 纵: 595 },
            当点触结束时: async () => {
                this.触发事件(new 自定义事件("关闭日记本"));
                await 接口.移除对象("项链菜单_日记本_图层", { 时长: 300 });
            },
        });

        let 序号 = 0;
        for (const 贴纸 of 入口册.获取贴纸配置()) {
            await 接口.创建选项(`项链菜单_日记本_日记册_贴纸_${序号++}`, {
                所属图层: "项链菜单_日记本_图层",
                正常态资源标识: 贴纸.资源标识,
                点击态资源标识: 贴纸.资源标识,
                位置: 贴纸.位置,
                当点触结束时: () => this.#查看日记页(贴纸.对应装订页),
            });
        }

        await Promise.all([
            接口.隐藏对象("项链菜单_日记本_日记册_上一册_按钮"),
            接口.隐藏对象("项链菜单_日记本_日记册_下一册_按钮"),
        ]);
        if (入口册.上一册) {
            const 上一册 = 入口册.上一册;
            await 接口.创建选项("项链菜单_日记本_日记册_上一册_按钮", {
                所属图层: "项链菜单_日记本_图层",
                资源标识: "$52524468",
                位置: { 横: 779, 纵: 412 },
                当点触结束时: () => this.#查看日记册(上一册, 是),
            });
        }
        if (入口册.下一册) {
            const 下一册 = 入口册.下一册;
            await 接口.创建选项("项链菜单_日记本_日记册_下一册_按钮", {
                所属图层: "项链菜单_日记本_图层",
                资源标识: "$52524472",
                位置: { 横: 976, 纵: 412 },
                当点触结束时: () => this.#查看日记册(下一册, 是),
            });
        }
    }

    constructor(时间管理器: 时间管理器类, 选项记录器: 选项记录器类) {
        super();
        this.#时间管理器 = 时间管理器;
        this.#选项记录器 = 选项记录器;
    }

    async 书写日记(参数: { 背景底图资源标识: 资源标识 }) {
        let 履行承诺 = (_: 未知) => {};

        const 日期 = this.#时间管理器.获取当前日期字符串();
        const 书写配置 = this.#写日记配置集.get(日期);
        if (!书写配置) throw `未配置 ${日期} 的日记！`;

        接口.播放音频("翻书音效", { 资源标识: "$53260527" }); // resId: "$53260527"
        await 接口.创建图片("日记书写背景图", {
            资源标识: 参数.背景底图资源标识,
            位置: { 横: 640, 纵: 360 },
            锚点: { 横: 50, 纵: 50 },
            动态缩放模式: 常量.动态缩放模式.覆盖,
            是否可见: 否,
        });

        await 接口.显示对象("日记书写背景图", { 时长: 2000 });

        await 接口.创建图层("日记书写_交互按钮_图层", {
            层级索引: 100,
            位置: { 横: 640, 纵: 360 },
            锚点: { 横: 50, 纵: 50 },
            裁剪模式: 是,
            裁剪区域: { 宽: 1280, 高: 720 },
        });

        await 接口.创建选项("日记书写_返回按钮", {
            所属图层: "日记书写_交互按钮_图层",
            正常态资源标识: "$53062946", // resId: "$53062946"
            点击态资源标识: "$53062946", // resId: "$53062946",
            位置: { 横: 150, 纵: 650 },
            锚点: { 横: 50, 纵: 50 },
            当点触结束时: async () => {
                this.触发事件(new 自定义事件("返回"));
                接口.播放音频("合上书本音效", { 资源标识: "$53383018" }); // resId: "$53383018"
                await Promise.all([
                    接口.移除对象("日记书写背景图", { 时长: 1000 }),
                    接口.移除对象("日记书写_交互按钮_图层", { 时长: 1000 }),
                ]);
                await 接口.打开对话框(常量.预设对话框.旁白框, "我没有写日记……直接合上了日记本。");
                await 接口.关闭对话框();
                履行承诺(是);
            },
        });

        const 速写日记 = async () => {};
        const 书写日记 = async () => {
            this.触发事件(new 自定义事件("开始书写日记"));
            await 接口.创建文本样式("日记书写_静态段落文本样式", {
                字体: "方正楷体",
                字号: 30,
                颜色: "#ffffff",
                描边宽度: 0,
                阴影颜色: "#000000",
                阴影偏移: { 水平: 1, 垂直: 1 },
            });

            await 接口.创建文本样式("日记书写_动态段落文本样式", {
                字体: "方正楷体",
                字号: 30,
                颜色: "#8faef2",
                描边宽度: 0,
                阴影颜色: "#000000",
                阴影偏移: { 水平: 1, 垂直: 1 },
            });

            接口.移除对象("日记书写_交互按钮_图层", { 时长: 300 });

            await 接口.创建图片("日记书写_日记纸_背景图", {
                资源标识: "$53062945", // resId: "$53062945"
                位置: { 横: 640, 纵: 360 },
                锚点: { 横: 50, 纵: 50 },
                动态缩放模式: 常量.动态缩放模式.覆盖,
                是否可见: 否,
            });

            接口.播放音频("翻书音效", { 资源标识: "$53260527" }); // resId: "$53260527"
            await 接口.显示对象("日记书写_日记纸_背景图", { 时长: 1000 });

            const 日记纸图层 = "日记书写_日记纸_段落_图层";
            await 接口.创建图层(日记纸图层, {
                层级索引: 100,
                位置: { 横: 640, 纵: 360 },
                锚点: { 横: 50, 纵: 50 },
                裁剪模式: 是,
                裁剪区域: { 宽: 1280, 高: 620 },
            });

            let 内容高度 = 0;
            const 段落间距 = 35;
            const 继续 = Symbol("继续");
            const 结束 = Symbol("结束");
            type 按钮标签 = typeof 继续 | typeof 结束;
            type 配置 = { 样式: 字符串; 文本: 字符串; 位置: 坐标; 大小: 大小 } | 按钮标签;
            const 段落书写配置: 配置[] = [];
            for (const 段落 of 书写配置.段落) {
                const 是动态段落 = typeof 段落 === "function";
                const 内容 = 是动态段落 ? 段落() : 段落;
                if (内容 === "【继续书写】") {
                    段落书写配置.push(继续);
                    continue;
                }

                if (内容 === "【完成书写】") {
                    段落书写配置.push(结束);
                    continue;
                }

                for (const 行内容 of 内容.split("\n")) {
                    const 测量结果 = 测量字符串(行内容, 30);
                    // FIXME: 为避免行首为标点符号的问题，暂时先以行宽为 800 - 30 的方式计算行数。
                    const 行数 = Math.ceil(测量结果.宽度 <= 770 ? 1 : 测量结果.宽度 / 770);
                    const 段落高度 = 行数 * 测量结果.高度 * 1.3;

                    内容高度 += 段落高度;

                    const 配置 = {
                        样式: 是动态段落 ? "日记书写_动态段落文本样式" : "日记书写_静态段落文本样式",
                        文本: 行内容,
                        大小: { 宽: 800, 高: 段落高度 } as 大小,
                        位置: { 横: 0, 纵: 内容高度 - 段落高度 } as 坐标,
                    };

                    内容高度 += 段落间距;

                    段落书写配置.push(配置);
                }
            }

            内容高度 += 50; // 为完成书写按钮预留空间

            接口.创建滚动视图("日记书写_日记纸_段落_滚动视图", {
                所属图层: 日记纸图层,
                位置: { 横: 640, 纵: 0 },
                锚点: { 横: 50, 纵: 0 },
                视图大小: { 宽: 830, 高: 620 },
                内容大小: { 宽: 800, 高: 内容高度 },
                是否水平滚动: 否,
                是否垂直滚动: 是,
            });

            let 当前位置 = { 横: 0, 纵: 0 };

            for (const [索引, 配置] of 段落书写配置.entries()) {
                if (配置 === 继续) {
                    接口.暂停音频("写字音效");
                    // biome-ignore format: 不需要换行
                    await new Promise<无>((履行) => 接口.创建选项("日记书写_日记段落_继续书写按钮", {
                        所属图层: "日记书写_日记纸_段落_滚动视图",
                        正常态资源标识: "$52601175", // resId: "$52601175"
                        点击态资源标识: "$52601175", // resId: "$52601175"
                        选项文字: "继续写……     ",
                        文字样式: "日记书写_动态段落文本样式",
                        位置: { 横: 640, 纵: 内容高度 - 当前位置.纵 - 150 },
                        锚点: { 横: 50, 纵: 0 },
                        当点触结束时: () => (接口.移除对象('日记书写_日记段落_继续书写按钮'), 履行()),
                    }));

                    continue;
                }

                if (配置 === 结束) {
                    接口.暂停音频("写字音效");
                    // biome-ignore format: 不需要换行
                    await new Promise<无>((履行) => 接口.创建选项("日记书写_日记段落_完成书写按钮", {
                        所属图层: "日记书写_日记纸_段落_滚动视图",
                        正常态资源标识: "$52601175", // resId: "$52601175"
                        点击态资源标识: "$52601175", // resId: "$52601175"
                        选项文字: "写完了       ",
                        文字样式: "日记书写_静态段落文本样式",
                        位置: { 横: 640, 纵: 0 },
                        锚点: { 横: 50, 纵: 0 },
                        当点触结束时: () => (接口.移除对象('日记书写_日记段落_完成书写按钮'), 履行()),
                    }));

                    continue;
                }

                当前位置 = 配置.位置;

                接口.播放音频("写字音效", { 资源标识: "$53385360", 循环播放: 是 }); // resId: "$53385360"
                await 接口.创建文本(`日记书写_日记段落_${索引}`, {
                    所属图层: "日记书写_日记纸_段落_滚动视图",
                    文本样式: 配置.样式,
                    文本内容: 配置.文本,
                    位置: { 横: 当前位置.横, 纵: 内容高度 - 当前位置.纵 },
                    锚点: { 横: 0, 纵: 100 },
                    文本框大小: 配置.大小,
                    水平对齐方式: 常量.水平对齐方式.靠左,
                    是否可见: 否,
                });

                await 接口.显示对象(`日记书写_日记段落_${索引}`, { 时长: 2000 });
            }

            接口.播放音频("合上书本音效", { 资源标识: "$53383018" }); // resId: "$53383018"
            await Promise.all([
                接口.移除对象("日记书写背景图", { 时长: 1000 }),
                接口.移除对象("日记书写_交互按钮_图层", { 时长: 1000 }),
                接口.移除对象("日记书写_日记纸_背景图", { 时长: 1000 }),
                接口.移除对象(日记纸图层, { 时长: 1000 }),
            ]);

            this.#选项记录器.记录({ 编号: 书写配置.编号, 选项: 1 });
            await 接口.打开对话框(常量.预设对话框.旁白框, "我写了一份日记……并合上了日记本。");
            await 接口.关闭对话框();

            this.触发事件(new 自定义事件("完成书写日记"));
            履行承诺(是);
        };

        await 接口.创建选项("日记书写_写日记按钮", {
            所属图层: "日记书写_交互按钮_图层",
            正常态资源标识: "$53063008", // resId: "$53063008"
            点击态资源标识: "$53063008", // resId: "$53063008"
            位置: { 横: 196, 纵: 154 },
            锚点: { 横: 50, 纵: 50 },
            当点触结束时: 书写日记,
        });

        await 接口.创建选项("日记书写_速写日记按钮", {
            所属图层: "日记书写_交互按钮_图层",
            正常态资源标识: "$53063007", // resId: "$53063007",
            点击态资源标识: "$53063007", // resId: "$53063007",
            位置: { 横: 366, 纵: 154 },
            锚点: { 横: 50, 纵: 50 },
            点击音效: { 资源标识: "$51554" }, // resId: "$51554"
            当点触结束时: 速写日记,
        });

        接口.播放音频("放下书音效", { 资源标识: "$53383017" }); // resId: "$53383017"

        return new Promise((履行) => (履行承诺 = 履行));
    }

    async 打开日记本() {
        const 日记本 = this.获取今日日记本();
        const 当前年份 = this.#时间管理器.获取当前年份();
        const 当前月份 = this.#时间管理器.获取当前月份();
        const 本月日记册 = 日记本.获取指定年月日记册(当前年份, 当前月份);
        console.log({
            日记本,
            本月日记册,
        });
        await this.#查看日记册(本月日记册);

        this.触发事件(new 自定义事件("打开日记本"));
        await 接口.显示对象("项链菜单_日记本_图层", { 时长: 300 });
    }

    #写日记配置集: Map<字符串, 写日记配置参数> = new Map();
    #日记页配置集: Set<日记页配置> = new Set();
    #日记册配置集: Set<日记册配置> = new Set();

    获取今日日记本() {
        const 日记本 = new 日记本类(this.#选项记录器);
        const 日期 = this.#时间管理器.获取当前日期字符串();
        const 当前年份 = this.#时间管理器.获取当前年份();
        const 当前月份 = this.#时间管理器.获取当前月份();
        const 断言 = (页: 日记页类) =>
            页.对应编号 === 未定义
                ? 页.日期 < 日期
                : 页.日期 <= 日期 && this.#选项记录器.查询({ 编号: 页.对应编号, 选项: 1 }) === 已选择;
        const 册集 = new Array<日记册类>();
        for (const 原始配置 of this.#日记册配置集) {
            if (原始配置.成册配置.对应年月.年 <= 当前年份 && 原始配置.成册配置.对应年月.月 <= 当前月份) {
                const 配置 = {
                    对应年月: 原始配置.成册配置.对应年月,
                    资源标识: 原始配置.成册配置.资源标识,
                    贴纸配置: 原始配置.成册配置.贴纸配置.filter((贴纸) => 断言(贴纸.对应装订页)),
                };

                const 页集 = 原始配置.页集.filter(断言);

                册集.push(new 日记册类(配置, 页集));
            }
        }

        return 日记本.装订成本(册集);
    }

    创建日记册(成册配置: 成册配置, 页集: 日记页类[]) {
        this.#日记册配置集.add({ 成册配置, 页集 });
        return new 日记册类(成册配置, 页集);
    }

    创建日记页(配置: 日记页配置): 日记页类 {
        this.#日记页配置集.add(配置);
        return new 日记页类(配置);
    }

    写日记配置(配置: 写日记配置参数) {
        if (配置.日期 === 未定义 && 配置.编号 === 未定义) throw "日记配置缺少日期和编号！";
        if (配置.日期 === 未定义) throw `日记配置 ${配置.编号} 缺少日期！`;
        if (配置.编号 === 未定义) throw `日记配置 ${配置.日期} 缺少编号！`;

        this.#选项记录器.定义新记录({
            日期: 配置.日期,
            编号: 配置.编号,
            选项模式: "单选",
            描述: "日记书写状态",
            可选项: [
                { 编号: 0, 描述: "未书写" },
                { 编号: 1, 描述: "已书写" },
            ],
        });

        this.#写日记配置集.set(配置.日期, 配置);
    }

    重置日记选项记录(参数: { 起始日期: `${数值}-${数值}-${数值}`; 是否含当日: 是否 }) {
        const 记录过滤函数 = (记录: 记录类) =>
            参数.是否含当日 ? 记录.日期 >= 参数.起始日期 : 记录.日期 > 参数.起始日期;
        const 待重置记录 = this.#选项记录器.获取记录().filter(记录过滤函数);

        this.#选项记录器.调试();
        for (const 记录 of 待重置记录) {
            记录.重置();
        }
        this.#选项记录器.调试();
    }
}

interface 日记册配置 {
    成册配置: 成册配置;
    页集: 日记页类[];
}
