import type { 字符串, 数值, 选择状态 } from "../运行时/全局常量.ts";
import { 已选择, 未定义, 未选择 } from "../运行时/全局常量.ts";
import { 变量 } from "../运行时/易次元.ts";
import { 错误 } from "../运行时/网络/错误.ts";
// rome-ignore lint/suspicious/noExplicitAny: 变量对象在运行时根据用户配置动态创建
type 任意 = any;

export class 变量容器类 {
    #映射 = new Map<字符串, 数值>();
    #选项记录器: 选项记录器类;

    constructor(选项记录器: 选项记录器类) {
        this.#选项记录器 = 选项记录器;
    }

    创建数值变量(名称: 字符串, 初始值: 数值 = 0) {
        if (this.#映射.has(名称)) throw new 错误(`变量 ${名称} 已存在！`);
        this.#映射.set(名称, 初始值);
    }

    查询数值(名称: 字符串) {
        const 初始值 = this.#映射.get(名称);
        if (初始值 === 未定义) throw new 错误(`变量 ${名称} 不存在！`);
    }

    获取初始变量对象() {
        const 变量对象: 任意 = {};
        for (const [变量路径, 初始值] of this.#映射) {
            const 路径数组 = 变量路径.split(".");
            const 变量名称 = 路径数组.pop();
            if (变量名称 === 未定义) throw new 错误(`变量 ${变量路径} 不存在！`);
            const 变量容器 = 路径数组.reduce((容器, 名称) => {
                if (容器[名称] === 未定义) 容器[名称] = {};
                return 容器[名称];
            }, 变量对象);
            变量容器[变量名称] = 初始值;
        }
        return 变量对象;
    }
}

interface 定义新记录参数 {
    编号: 数值;
    日期: 字符串;
    描述?: 字符串;
    选项模式: "单选" | "多选";
    可选项: { 编号: 数值; 描述?: 字符串; 执行结果?: (变量对象: 任意) => 任意 }[];
}

interface 记录 extends 定义新记录参数 {
    记录原始值: 数值;
}

export class 选项记录器类 {
    #记录集: 记录[] = [];

    定义新记录(参数: 定义新记录参数) {
        if (参数.编号 === 未定义) throw new 错误(`记录编号不能为空！`);
        if (this.#记录集[参数.编号] !== 未定义) throw new 错误(`记录 ${参数.编号} 已存在！`);
        if (参数.日期 === 未定义) throw new 错误(`记录 ${参数.编号} 日期不能为空！`);
        if (参数.选项模式 === 未定义) throw new 错误(`记录 ${参数.编号} 选项模式不能为空！`);
        if (!["单选", "多选"].includes(参数.选项模式)) {
            throw new 错误(`记录 ${参数.编号} 记录选项模式只能是 "单选" 或 "多选"！`);
        }
        if (参数.可选项 === 未定义) throw new 错误(`记录 ${参数.编号} 可选项不能为空！`);
        if (参数.可选项.length < 1) throw new 错误(`记录 ${参数.编号} 的可选项数量不能少于 1 个！`);
        for (const [索引, 可选项] of 参数.可选项.entries()) {
            if (可选项.编号 !== 索引) {
                throw new 错误(`记录 ${参数.编号} 的可选项 ${可选项.编号} 编号不正确，应为 ${索引}！`);
            }
        }

        this.#记录集[参数.编号] = {
            ...参数,
            记录原始值: 0b0000_0000_0000_0000,
        };
    }

    记录(参数: { 编号: 数值; 选项: 数值 }[]): void;
    记录(参数: { 编号: 数值; 选项: 数值 }): void;
    记录(参数: { 编号: 数值; 选项: 数值 } | { 编号: 数值; 选项: 数值 }[]): void {
        if (参数 instanceof Array) {
            for (const { 编号, 选项 } of 参数) {
                this.记录({ 编号, 选项 });
            }
            return;
        }
        const 记录 = this.#记录集[参数.编号];
        if (记录 === 未定义) throw new 错误(`记录 ${参数.编号} 不存在！`);
        if (记录.可选项[参数.选项] === 未定义) throw new 错误(`记录 ${参数.编号} 的选项 ${参数.选项} 不存在！`);

        if (记录.选项模式 === "单选") {
            变量.内存[参数.编号] = 1 << 参数.选项;
        } else {
            变量.内存[参数.编号] |= 1 << 参数.选项;
        }
    }

    查询(参数: { 编号: 数值 }): 选择状态[];
    查询(参数: { 编号: 数值; 选项: 数值 }): 选择状态;
    查询(参数: { 编号: 数值; 选项?: 数值 }): 选择状态 | 选择状态[] {
        const 记录 = this.#记录集[参数.编号];
        if (记录 === 未定义) throw new 错误(`记录 ${参数.编号} 不存在！`);

        if (参数.选项 === 未定义) {
            return 记录.可选项.map((可选项) => (变量.内存[参数.编号] >> 可选项.编号) & 1 ? 已选择 : 未选择);
        }

        if (记录.可选项[参数.选项] === 未定义) throw new 错误(`记录 ${参数.编号} 的选项 ${参数.选项} 不存在！`);

        return (变量.内存[参数.编号] >> 参数.选项) & 1 ? 已选择 : 未选择;
    }
}
