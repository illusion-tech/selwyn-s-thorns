import type { 字符串, 数值, 选择状态 } from "../运行时/全局常量.ts";
import { 已选择, 未定义, 未选择 } from "../运行时/全局常量.ts";
import { 变量 } from "../运行时/易次元.ts";

type 任意 = any;
export type 执行器 = (变量对象: 任意) => 任意;

export interface 定义新记录参数 {
    编号: 数值;
    日期: 字符串;
    描述?: 字符串;
    选项模式: "单选" | "多选";
    可选项: { 编号: 数值; 描述?: 字符串; 执行结果?: 执行器 }[];
}

type 记录构造参数 = 定义新记录参数;

interface 选项 {
    readonly 编号: 数值;
    readonly 描述?: 字符串;
    readonly 执行结果?: 执行器;
    readonly 选择状态: 选择状态;
}

class 记录类 {
    #编号: 数值;
    #日期: 字符串;
    #描述?: 字符串;
    #选项模式: "单选" | "多选";
    #可选项: 选项[];

    constructor(参数: 记录构造参数) {
        this.#编号 = 参数.编号;
        this.#日期 = 参数.日期;
        this.#描述 = 参数.描述;
        this.#选项模式 = 参数.选项模式;
        this.#可选项 = 参数.可选项.map((选项) => {
            const 记录 = this;
            return new (class {
                get 编号() {
                    return 选项.编号;
                }
                get 描述() {
                    return 选项.描述;
                }
                get 执行结果() {
                    return 选项.执行结果 ?? (() => void 0);
                }
                get 选择状态() {
                    return (变量.内存[记录.#编号] >> 选项.编号) & 1 ? 已选择 : 未选择;
                }
            })();
        });
    }

    get 编号() {
        return this.#编号;
    }

    get 内存原始值() {
        return 变量.内存[this.#编号];
    }

    get 日期() {
        return this.#日期;
    }

    get 描述() {
        return this.#描述;
    }

    get 选项模式() {
        return this.#选项模式;
    }

    get 可选项() {
        return this.#可选项;
    }

    get 选择状态(): 选择状态 {
        return this.内存原始值 === 0 ? 未选择 : 已选择;
    }

    get 选项选择状态(): 选择状态[] {
        return this.#可选项.map((选项) => 选项.选择状态);
    }

    记录选择(选项编号: 数值) {
        if (this.#选项模式 === "单选") {
            变量.内存[this.#编号] = 1 << 选项编号;
        } else if (this.#选项模式 === "多选") {
            变量.内存[this.#编号] |= 1 << 选项编号;
        }
    }

    重置(选项编号?: 数值) {
        if (选项编号 !== 未定义) {
            变量.内存[this.#编号] &= ~(1 << 选项编号);
            return;
        }
        变量.内存[this.#编号] = 0;
    }

    /**
     * 获取该记录下关联的执行器。
     * @param 选择状态 仅获取指定选择状态选项下的执行器。
     * @备注
     *  - 不指定选择状态时，获取所有选项下的执行器。
     *  - 选项没有定义执行器时，返回空执行器。
     */
    获取执行器(选择状态?: 选择状态) {
        return this.#可选项
            .filter((选项) => 选择状态 === 未定义 || 选项.选择状态 === 选择状态)
            .map((选项) => 选项.执行结果 ?? (() => void 0));
    }
}

export class 选项记录器类 {
    #记录集: 记录类[] = [];

    定义新记录(参数: 定义新记录参数) {
        if (参数.编号 === 未定义) throw "记录编号不能为空！";
        if (this.#记录集[参数.编号] !== 未定义) throw `记录 ${参数.编号} 已存在！`;
        if (参数.日期 === 未定义) throw `记录 ${参数.编号} 日期不能为空！`;
        if (参数.选项模式 === 未定义) throw `记录 ${参数.编号} 选项模式不能为空！`;
        if (!["单选", "多选"].includes(参数.选项模式)) {
            throw `记录 ${参数.编号} 记录选项模式只能是 "单选" 或 "多选"！`;
        }
        if (参数.可选项 === 未定义) throw `记录 ${参数.编号} 可选项不能为空！`;
        if (参数.可选项.length < 1) throw `记录 ${参数.编号} 的可选项数量不能少于 1 个！`;
        for (const [索引, 可选项] of 参数.可选项.entries()) {
            if (可选项.编号 !== 索引) {
                throw `记录 ${参数.编号} 的可选项 ${可选项.编号} 编号不正确，应为 ${索引}！`;
            }
        }

        this.#记录集[参数.编号] = new 记录类(参数);

        return this.#记录集[参数.编号];
    }

    记录(参数: { 编号: 数值; 选项: 数值 }[]): void;
    记录(参数: { 编号: 数值; 选项: 数值 }): void;
    记录(参数: { 编号: 数值; 选项: 数值 } | { 编号: 数值; 选项: 数值 }[]): void {
        if (参数 instanceof Array) {
            for (const { 编号, 选项 } of 参数) {
                this.记录({ 编号, 选项 });
            }
            return;
        }
        const 记录 = this.#记录集[参数.编号];
        if (记录 === 未定义) throw `记录 ${参数.编号} 不存在！`;
        if (记录.可选项[参数.选项] === 未定义) throw `记录 ${参数.编号} 的选项 ${参数.选项} 不存在！`;

        记录.记录选择(参数.选项);
    }

    查询(参数: { 编号: 数值 }): 选择状态[];
    查询(参数: { 编号: 数值; 选项: 数值 }): 选择状态;
    查询(参数: { 编号: 数值; 选项?: 数值 }): 选择状态 | 选择状态[] {
        const 记录 = this.#记录集[参数.编号];
        if (记录 === 未定义) throw `记录 ${参数.编号} 不存在！`;

        if (参数.选项 === 未定义) return 记录.选项选择状态;

        if (记录.可选项[参数.选项] === 未定义) throw `记录 ${参数.编号} 的选项 ${参数.选项} 不存在！`;

        return 记录.可选项[参数.选项].选择状态;
    }

    /**
     * 获取指定`编号`记录下的执行器。
     * @param 参数 查询执行器的参数
     * @returns 执行器数组
     * @备注
     * - 不指定`编号`时，获取所有记录下的执行器。
     * - 不指定`选择状态`时，获取记录下所有选项下的执行器。
     * - 选项没有定义执行器时，返回空执行器。
     */
    获取执行器(参数?: { 编号?: 数值; 选择状态?: 选择状态 }): 执行器[] {
        if (参数 === 未定义) {
            return this.#记录集.flatMap((记录) => 记录.获取执行器());
        }

        if (参数.编号 === 未定义) {
            if (参数.选择状态 === 未定义) {
                return this.#记录集.flatMap((记录) => 记录.获取执行器());
            } else {
                return this.#记录集.flatMap((记录) => 记录.获取执行器(参数.选择状态));
            }
        } else {
            if (参数.选择状态 === 未定义) {
                return this.#记录集[参数.编号].获取执行器();
            } else {
                return this.#记录集[参数.编号].获取执行器(参数.选择状态);
            }
        }
    }

    获取记录(): 记录类[];
    获取记录(编号: 数值): 记录类;
    获取记录(编号?: 数值): 记录类 | 记录类[] {
        if (编号 === 未定义) {
            // 通过 filter 方法会返回创建新的过滤掉空元素的数组
            return this.#记录集.filter(() => true);
        }
        const 记录 = this.#记录集[编号];
        if (记录 === 未定义) throw `记录<编号 ${编号} >不存在！`;
        return 记录;
    }

    调试() {
        for (const 记录 of this.获取记录()) {
            const 编号 = `#${记录.编号}`.padStart(4, " ");
            const 日期 = `[${记录.日期}]`;
            const 模式 = 记录.选项模式;
            const 状态 = `[${记录.选项选择状态.map((状态) => (状态 === 已选择 ? "+" : "-")).join("")}]`;
            const 描述 = 记录.描述;

            console.log([编号, 日期, 模式, 状态, 描述].join(" - "));
        }
    }
}
