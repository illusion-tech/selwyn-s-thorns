class 对话选项 {
	constructor() {
		this.内容 = "";
		this.条件集 = [];
		this.结果执行函数 = () => {};
	}

	设置对话选项内容(内容) {
		this.内容 = 内容;
		return this;
	}

	/**
   * 添加对话选项显示的条件，多次添加的条件需要全部满足。
	 * @param {{需满足:()=>boolean, 当不满足时提示: string}} 条件
	 * @returns
	 */
	添加对话选项条件(条件) {
		this.条件集.push(条件);
		return this;
	}

	设置对话选项执行结果(结果执行函数) {
		this.结果执行函数 = 结果执行函数;
		return this;
	}
}

class 对话选项面板 {
	constructor(参数) {
		this.编号 = 参数.编号;
		this.描述 = 参数.描述;
		this.可选项 = 参数.可选项;
	}
}

class 人物管理器 {
  static 黛瑞雅 = {
    谦逊: 0,
    魅力: 0,
    力量: 0,
  };
}

class 对话选项管理器类 {
	创建对话选项面板(参数) {
		if (!参数.编号) alert("对话选项面板必须有编号！");
		if (!参数.描述) alert("对话选项面板必须有描述！");
		if (参数.可选项.length < 2 || 参数.可选项.length > 7)
			alert("对话选项面板必须有2到6个选项！");

		const 面板 = new 对话选项面板(参数);

		return 面板;
	}

	创建对话选项(参数) {
		const 选项 = new 对话选项();
		if (参数?.对话内容) 选项.设置对话选项内容(参数.对话内容);

		return 选项;
	}
}

/**
 * @type {对话选项管理器类}
 */
const 对话选项管理器 = 容器.has(记号.对话选项管理器)
	? 容器.get(记号.对话选项管理器)
	: (容器.set(记号.对话选项管理器, new 对话选项管理器类()),
	  容器.get(记号.对话选项管理器));

async function 测试() {
	const 选项1 = 对话选项管理器
		.创建对话选项()
		.设置对话选项内容("让阿斯托利亚看项链")
		.添加对话选项条件({
			需满足: () => 人物管理器.黛瑞雅.谦逊 > 10,
			当不满足时提示: "谦虚太低",
		})
		.设置对话选项执行结果(() => {
			人物管理器.黛瑞雅.谦逊 += 5;
			人物管理器.黛瑞雅.魅力 += 5;
			人物管理器.黛瑞雅.力量 += 5;
		});
	const 选项2 = 对话选项管理器.创建对话选项({ 对话内容: "婉拒阿斯托利亚" });
	const 面板 = 对话选项管理器.创建对话选项面板({
		编号: 1,
		描述: "阿斯托利亚想要看看你的项链",
		可选项: [选项1, 选项2],
	});

	对话选项管理器.显示对话选项面板({ 编号: 1 });
}
