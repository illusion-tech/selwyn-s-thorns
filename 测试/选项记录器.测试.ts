import "塞尔温荆棘://测试/测试环境.ts";

import { assertEquals, assertExists, assertThrows } from "https://deno.land/std/testing/asserts.ts";
import { 选项记录器类, type 定义新记录参数 } from "塞尔温荆棘://src/用户界面/选项记录器.ts";
import { 已选择, 未选择 } from "塞尔温荆棘://src/运行时/全局常量.ts";
import { 变量 } from "塞尔温荆棘://src/运行时/易次元.ts";

Deno.test("选项记录器", () => {
    const 选项记录器 = new 选项记录器类();

    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: ({ 黛瑞雅 }) => (黛瑞雅.傲慢 += 3) },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    选项记录器.定义新记录({
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "多选",
        可选项: [
            { 编号: 0, 执行结果: ({ 黛瑞雅 }) => (黛瑞雅.傲慢 += 3) },
            { 编号: 1, 执行结果: ({ 黛瑞雅 }) => (黛瑞雅.谦逊 += 3) },
            { 编号: 2, 执行结果: () => {} },
        ],
    });

    选项记录器.记录([
        { 编号: 0, 选项: 0 },
        { 编号: 1, 选项: 0 },
        { 编号: 1, 选项: 2 },
    ]);
    assertEquals(变量.内存, [0b0001, 0b0101]);
});

Deno.test("选项记录器 - 构造", () => {
    const 选项记录器 = new 选项记录器类();

    assertExists(选项记录器);
});

Deno.test("选项记录器 - 定义新记录", () => {
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });
});

Deno.test("选项记录器 - 定义新记录 - 可选项编号不为从 0 开始的接续序号时须抛错", () => {
    const 选项记录器 = new 选项记录器类();
    assertThrows(() => {
        选项记录器.定义新记录({
            编号: 0,
            日期: "1992-06-05",
            描述: "第一次选项",
            选项模式: "单选",
            可选项: [
                { 编号: 0, 执行结果: () => {} },
                { 编号: 1, 执行结果: () => {} },
                { 编号: 2, 执行结果: () => {} },
                { 编号: 4, 执行结果: () => {} },
            ],
        });
    });

    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertThrows(() => {
        选项记录器.定义新记录({
            编号: 0,
            日期: "1992-06-05",
            描述: "第一次选项",
            选项模式: "单选",
            可选项: [
                { 编号: 1, 执行结果: () => {} },
                { 编号: 2, 执行结果: () => {} },
                { 编号: 3, 执行结果: () => {} },
                { 编号: 4, 执行结果: () => {} },
            ],
        });
    });
});

Deno.test("选项记录器 - 定义新记录 - 重复定义须抛错", () => {
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertThrows(() => {
        选项记录器.定义新记录({
            编号: 0,
            日期: "1992-06-05",
            描述: "第一次选项",
            选项模式: "单选",
            可选项: [
                { 编号: 0, 执行结果: () => {} },
                { 编号: 1, 执行结果: () => {} },
                { 编号: 2, 执行结果: () => {} },
                { 编号: 3, 执行结果: () => {} },
            ],
        });
    });
});

Deno.test("选项记录器 - 定义新记录 - 单选记录时，可选项少于 2 个须抛错", () => {
    const 选项记录器 = new 选项记录器类();

    assertThrows(() => {
        选项记录器.定义新记录({
            编号: 0,
            日期: "1992-06-05",
            描述: "第一次选项",
            选项模式: "单选",
            可选项: [],
        });
    });
});

Deno.test("选项记录器 - 定义新记录 - 缺少必填项时须抛错", () => {
    const 选项记录器 = new 选项记录器类();
    // deno-lint-ignore no-explicit-any
    type 任意 = any;

    assertThrows(() => {
        选项记录器.定义新记录({} as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0 } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 日期: "1992-06-05" } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 日期: "1992-06-05", 选项模式: "单选" } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 日期: "1992-06-05", 选项模式: "单选", 可选项: [] } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 日期: "1992-06-05", 可选项: [] } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 选项模式: "单选", 可选项: [] } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 日期: "1992-06-05", 选项模式: "单选", 可选项: [] } as 任意);
    });

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 可选项: [] } as 任意);
    });
});

Deno.test("选项记录器 - 定义新记录 - 选项模式仅可为 `单选` 与 `多选` ", () => {
    const 选项记录器 = new 选项记录器类();
    // deno-lint-ignore no-explicit-any
    type 任意 = any;

    assertThrows(() => {
        选项记录器.定义新记录({ 编号: 0, 日期: "1992-06-05", 选项模式: "非法值", 可选项: [] } as 任意);
    });
});

Deno.test("选项记录器 - 记录 - 记录编号未定义过的记录须抛错", () => {
    const 选项记录器 = new 选项记录器类();

    assertThrows(() => {
        选项记录器.记录({ 编号: 0, 选项: 0 });
    });
});

Deno.test("选项记录器 - 记录 - 选项编号必须在可选项范围内", () => {
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertThrows(() => {
        选项记录器.记录({ 编号: 0, 选项: 4 });
    });
});

Deno.test("选项记录器 - 记录 - 单选个模式 - 重复记录同一选项，须重置先前的选择", () => {
    变量.内存.fill(0);
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 未选择);
    选项记录器.记录({ 编号: 0, 选项: 0 });
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 已选择);

    选项记录器.记录({ 编号: 0, 选项: 1 });
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 1 }), 已选择);
});

Deno.test("选项记录器 - 记录 - 多选模式 - 重复记录同一选项，须保留先前的选择", () => {
    变量.内存.fill(0);
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "多选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 未选择);
    选项记录器.记录({ 编号: 0, 选项: 0 });
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 已选择);

    选项记录器.记录({ 编号: 0, 选项: 1 });
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 已选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 1 }), 已选择);
});

Deno.test("选项记录器 - 记录 - 批量设置", () => {
    变量.内存.fill(0);
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "多选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });
    选项记录器.定义新记录({
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
        ],
    });

    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 1 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 2 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 3 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 1, 选项: 0 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 1, 选项: 1 }), 未选择);

    选项记录器.记录([
        { 编号: 0, 选项: 0 },
        { 编号: 0, 选项: 2 },
        { 编号: 1, 选项: 1 },
    ]);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 已选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 1 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 2 }), 已选择);
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 3 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 1, 选项: 0 }), 未选择);
    assertEquals(选项记录器.查询({ 编号: 1, 选项: 1 }), 已选择);
});

Deno.test("选项记录器 - 查询 - 查询编号未定义过的记录须抛错", () => {
    const 选项记录器 = new 选项记录器类();

    assertThrows(() => {
        选项记录器.查询({ 编号: 0, 选项: 0 });
    });
});

Deno.test("选项记录器 - 查询 - 查询编号已定义过的记录，但未记录过选项，须返回未选择", () => {
    变量.内存.fill(0);

    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 未选择);
});

Deno.test("选项记录器 - 查询 - 查询编号已定义过的记录，且已记录过选项，须返回已选择", () => {
    变量.内存.fill(0);

    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    选项记录器.记录({ 编号: 0, 选项: 0 });
    assertEquals(选项记录器.查询({ 编号: 0, 选项: 0 }), 已选择);
});

Deno.test("选项记录器 - 查询 - 选项编号未定义的记录，须抛错", () => {
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertThrows(() => {
        选项记录器.查询({ 编号: 0, 选项: 4 });
    });
});

Deno.test("选项记录器 - 查询 - 所有选项的选择状态", () => {
    变量.内存.fill(0);

    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "多选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    选项记录器.记录({ 编号: 0, 选项: 0 });
    assertEquals(选项记录器.查询({ 编号: 0 }), [已选择, 未选择, 未选择, 未选择]);

    选项记录器.记录({ 编号: 0, 选项: 1 });
    assertEquals(选项记录器.查询({ 编号: 0 }), [已选择, 已选择, 未选择, 未选择]);
});

Deno.test("选项记录器 - 获取执行器", () => {
    变量.内存.fill(0);
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });
    选项记录器.获取执行器();
});

Deno.test("选项记录器 - 获取执行器 - 选项编号未定义的记录，须抛错", () => {
    const 选项记录器 = new 选项记录器类();
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
            { 编号: 2, 执行结果: () => {} },
            { 编号: 3, 执行结果: () => {} },
        ],
    });

    assertThrows(() => {
        选项记录器.获取执行器({ 编号: 1 });
    });
});

Deno.test("选项记录器 - 获取执行器 - 获取所有记录的执行器", () => {
    const 选项记录器 = new 选项记录器类();
    const 执行器1 = () => {};
    const 执行器2 = () => {};
    const 执行器3 = () => {};
    const 执行器4 = () => {};
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: 执行器1 },
            { 编号: 1, 执行结果: 执行器2 },
        ],
    });
    选项记录器.定义新记录({
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: 执行器3 },
            { 编号: 1, 执行结果: 执行器4 },
        ],
    });

    assertEquals(选项记录器.获取执行器(), [执行器1, 执行器2, 执行器3, 执行器4]);
});

Deno.test("选项记录器 - 获取执行器 - 给定记录编号，获取该记录下所有的执行器", () => {
    const 选项记录器 = new 选项记录器类();
    const 执行器1 = () => {};
    const 执行器2 = () => {};
    const 执行器3 = () => {};
    const 执行器4 = () => {};
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: 执行器1 },
            { 编号: 1, 执行结果: 执行器2 },
        ],
    });
    选项记录器.定义新记录({
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: 执行器3 },
            { 编号: 1, 执行结果: 执行器4 },
        ],
    });

    assertEquals(选项记录器.获取执行器({ 编号: 1 }), [执行器3, 执行器4]);
});

Deno.test("选项记录器 - 获取执行器 - 给定选择状态，获取所有记录下指定选择状态的执行器", () => {
    const 选项记录器 = new 选项记录器类();
    const 执行器1 = () => {};
    const 执行器2 = () => {};
    const 执行器3 = () => {};
    const 执行器4 = () => {};
    选项记录器.定义新记录({
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: 执行器1 },
            { 编号: 1, 执行结果: 执行器2 },
        ],
    });
    选项记录器.定义新记录({
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: 执行器3 },
            { 编号: 1, 执行结果: 执行器4 },
        ],
    });

    选项记录器.记录([
        { 编号: 0, 选项: 1 },
        { 编号: 1, 选项: 0 },
    ]);

    assertEquals(选项记录器.获取执行器({ 选择状态: 已选择 }), [执行器2, 执行器3]);
});

Deno.test("选项记录器 - 获取记录 - 获取所有记录", () => {
    const 选项记录器 = new 选项记录器类();
    const 记录1 = {
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
        ],
    } as 定义新记录参数;
    const 记录2 = {
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
        ],
    } as 定义新记录参数;
    选项记录器.定义新记录(记录1);
    选项记录器.定义新记录(记录2);

    const 记录 = 选项记录器.获取记录();
    assertEquals(记录.length, 2);
    assertEquals(记录[0].编号, 记录1.编号);
    assertEquals(记录[0].日期, 记录1.日期);
    assertEquals(记录[0].描述, 记录1.描述);
    assertEquals(记录[0].选项模式, 记录1.选项模式);
    assertEquals(记录[1].编号, 记录2.编号);
    assertEquals(记录[1].日期, 记录2.日期);
    assertEquals(记录[1].描述, 记录2.描述);
    assertEquals(记录[1].选项模式, 记录2.选项模式);
});

Deno.test("选项记录器 - 获取记录 - 给定记录编号，获取指定记录", () => {
    const 选项记录器 = new 选项记录器类();
    const 记录1 = {
        编号: 0,
        日期: "1992-06-05",
        描述: "第一次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
        ],
    } as 定义新记录参数;
    const 记录2 = {
        编号: 1,
        日期: "1992-06-05",
        描述: "第二次选项",
        选项模式: "单选",
        可选项: [
            { 编号: 0, 执行结果: () => {} },
            { 编号: 1, 执行结果: () => {} },
        ],
    } as 定义新记录参数;
    选项记录器.定义新记录(记录1);
    选项记录器.定义新记录(记录2);

    const 记录 = 选项记录器.获取记录(1);
    assertEquals(记录.编号, 记录2.编号);
    assertEquals(记录.日期, 记录2.日期);
    assertEquals(记录.描述, 记录2.描述);
    assertEquals(记录.选项模式, 记录2.选项模式);
});
